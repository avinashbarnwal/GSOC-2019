f_z <- function(z=z,dist='logistic'){
if(dist=='logistic'){
f_z = exp(1)**z/(1+exp(1)**z)^2
}
if(dist=='normal'){
f_z = dnorm(z)
}
return(f_z)
}
grad_f_z <- function(z=z,dist='logistic'){
f_z      = f_z(z,dist)
if(dist == 'logistic'){
grad_f_z = f_z*(1-exp(1)**z)/(1+exp(1)**z)
}
if(dist == 'normal'){
grad_f_z = -z*f_z
}
return(grad_f_z)
}
hes_f_z <- function(z=z,dist='logistic'){
f_z = f_z(z,dist)
if(dist=='normal'){
hes_f_z = (z**2-1)*f_z
}
if(dist=='logistic'){
w       = exp(1)**z
hes_f_z = f_z*(w**2-4*w+1)/(1+w)**2
}
return(hes_f_z)
}
F_z <- function(z,dist='logistic'){
if(dist=='logistic'){
F_z = exp(1)**z/(1+exp(1)**z)
}
if(dist=='normal'){
F_z = pnorm(z)
}
return(F_z)
}
grad_F_z <- function(z,dist){
grad_F_z <- f_z(z,dist)
return(grad_F_z)
}
f_y <- function(z=z,t.obs=t.obs,sigma=sigma,dist='logistic'){
f_y = f_z(z,dist)/(t.obs*sigma)
return(f_y)
}
grad_f_y <- function(z=z,t.obs=t.obs,sigma=sigma,dist='logistic'){
grad_f_y = -grad_f_z(z,dist)/(sigma^2*t.obs)
return(grad_f_y)
}
t.lower = 100
y.hat=2**(seq(1,x.lim,length=n.points))
t.lower = 100
y.hat=2**(seq(1,x.lim,length=n.points))
n.points = 20
x.lim    = 15
z             = (log(t.lower) - log(y.hat))/sigma
f_z           = f_z(z,dist)
grad_f_z      = grad_f_z(z,dist)
hes_f_z       = hes_f_z(z,dist)
hess           = -(f_z*hes_f_z - grad_f_z**2)/(sigma**2*f_z**2)
data_type     = rep("Uncensored",n.points)
parameter_type = rep('Hessian',n.points)
y.hat=2**(seq(1,x.lim,length=n.points))
z             = (log(t.lower) - log(y.hat))/sigma
f_z           = f_z(z,dist)
dist='normal'
f_z           = f_z(z,dist)
grad_f_z      = grad_f_z(z,dist)
hes_f_z       = hes_f_z(z,dist)
z <- function(t.obs=t.obs,y.hat=y.hat,sigma=sigma){
z = (log(t.obs)-log(y.hat))/sigma
return(z)
}
f_z <- function(z=z,dist='logistic'){
if(dist=='logistic'){
f_z = exp(1)**z/(1+exp(1)**z)^2
}
if(dist=='normal'){
f_z = dnorm(z)
}
return(f_z)
}
grad_f_z <- function(z=z,dist='logistic'){
f_z      = f_z(z,dist)
if(dist == 'logistic'){
grad_f_z = f_z*(1-exp(1)**z)/(1+exp(1)**z)
}
if(dist == 'normal'){
grad_f_z = -z*f_z
}
return(grad_f_z)
}
hes_f_z <- function(z=z,dist='logistic'){
f_z = f_z(z,dist)
if(dist=='normal'){
hes_f_z = (z**2-1)*f_z
}
if(dist=='logistic'){
w       = exp(1)**z
hes_f_z = f_z*(w**2-4*w+1)/(1+w)**2
}
return(hes_f_z)
}
F_z <- function(z,dist='logistic'){
if(dist=='logistic'){
F_z = exp(1)**z/(1+exp(1)**z)
}
if(dist=='normal'){
F_z = pnorm(z)
}
return(F_z)
}
grad_F_z <- function(z,dist){
grad_F_z <- f_z(z,dist)
return(grad_F_z)
}
f_y <- function(z=z,t.obs=t.obs,sigma=sigma,dist='logistic'){
f_y = f_z(z,dist)/(t.obs*sigma)
return(f_y)
}
grad_f_y <- function(z=z,t.obs=t.obs,sigma=sigma,dist='logistic'){
grad_f_y = -grad_f_z(z,dist)/(sigma^2*t.obs)
return(grad_f_y)
}
dnorm(0,0,1)
dlogistic
dlogis(0,0,1)
plogis(0,0,1)
library(ggplot2)
library(gridExtra)
setwd('/Users/avinashbarnwal/Desktop/Personal/GSOC-2019/AFT/R')
#http://home.iitk.ac.in/~kundu/paper146.pdf
#https://www.mathworks.com/matlabcentral/answers/428624-cdf-for-loglogistic-distribution
set.seed(2)
loss   <- function(n.obs = 100, y.obs = 50, y.hat=1){
loss <- -y.obs*y.hat + n.obs*log(1+exp(y.hat))
return(loss)
}
neg_gradient   <- function(n.obs = 100, y.obs = 50, y.hat=1){
neg_gradient <- y.obs - n.obs*(exp(y.hat)/(1+exp(y.hat)))
return(neg_gradient)
}
hessian   <- function(n.obs = 100, y.obs = 50, y.hat=1){
hessian <- n.obs*(exp(y.hat)/(1+exp(y.hat))**2)
return(hessian)
}
binomial_properties <- function(n.obs = 100, y.obs = 50, y.hat=1,type="loss"){
if(type=="loss"){
loss         = loss(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=loss, data_type = type_series)
return(data)
}
if(type=="neg_gradient"){
neg_gradient = neg_gradient(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=neg_gradient, data_type = type_series)
return(data)
}
if(type=="hessian"){
hessian      = hessian(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=hessian, data_type = type_series)
return(data)
}
}
n.points  = 200
x.lim     = 50
distribution.list  = list(loss         = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian      = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
#png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost,colour=data_type),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ .,scales="free") +
scale_color_discrete(name = "Distribution")
p
#dev.off()
library(ggplot2)
library(gridExtra)
setwd('/Users/avinashbarnwal/Desktop/Personal/GSOC-2019/AFT/R')
#http://home.iitk.ac.in/~kundu/paper146.pdf
#https://www.mathworks.com/matlabcentral/answers/428624-cdf-for-loglogistic-distribution
set.seed(2)
loss   <- function(n.obs = 100, y.obs = 50, y.hat=1){
loss <- -y.obs*y.hat + n.obs*log(1+exp(y.hat))
return(loss)
}
neg_gradient   <- function(n.obs = 100, y.obs = 50, y.hat=1){
neg_gradient <- y.obs - n.obs*(exp(y.hat)/(1+exp(y.hat)))
return(neg_gradient)
}
hessian   <- function(n.obs = 100, y.obs = 50, y.hat=1){
hessian <- n.obs*(exp(y.hat)/(1+exp(y.hat))**2)
return(hessian)
}
binomial_properties <- function(n.obs = 100, y.obs = 50, y.hat=1,type="loss"){
if(type=="loss"){
loss         = loss(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=loss, data_type = type_series)
return(data)
}
if(type=="neg_gradient"){
neg_gradient = neg_gradient(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=neg_gradient, data_type = type_series)
return(data)
}
if(type=="hessian"){
hessian      = hessian(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=hessian, data_type = type_series)
return(data)
}
}
n.points  = 200
x.lim     = 50
distribution.list  = list(loss         = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian      = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
#png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ .,scales="free") +
scale_color_discrete(name = "Distribution")
p
#dev.off()
library(ggplot2)
library(gridExtra)
setwd('/Users/avinashbarnwal/Desktop/Personal/GSOC-2019/AFT/R')
#http://home.iitk.ac.in/~kundu/paper146.pdf
#https://www.mathworks.com/matlabcentral/answers/428624-cdf-for-loglogistic-distribution
set.seed(2)
loss   <- function(n.obs = 100, y.obs = 50, y.hat=1){
loss <- -y.obs*y.hat + n.obs*log(1+exp(y.hat))
return(loss)
}
neg_gradient   <- function(n.obs = 100, y.obs = 50, y.hat=1){
neg_gradient <- y.obs - n.obs*(exp(y.hat)/(1+exp(y.hat)))
return(neg_gradient)
}
hessian   <- function(n.obs = 100, y.obs = 50, y.hat=1){
hessian <- n.obs*(exp(y.hat)/(1+exp(y.hat))**2)
return(hessian)
}
binomial_properties <- function(n.obs = 100, y.obs = 50, y.hat=1,type="loss"){
if(type=="loss"){
loss         = loss(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=loss, data_type = type_series)
return(data)
}
if(type=="neg_gradient"){
neg_gradient = neg_gradient(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=neg_gradient, data_type = type_series)
return(data)
}
if(type=="hessian"){
hessian      = hessian(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
data         = data.frame(y.hat = y.hat, cost=hessian, data_type = type_series)
return(data)
}
}
n.points  = 200
x.lim     = 50
distribution.list  = list(loss_50            = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
loss_0             = binomial_properties(type="loss", n.obs = 100, y.obs  = 0, y.hat=seq(-50,x.lim,length=n.points)),
loss_20            = binomial_properties(type="loss", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_50    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_0     = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_20    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
hessian_50         = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian_0          = binomial_properties(type="hessian", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
hessian_20         = binomial_properties(type="hessian", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
#png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ y.obs,scales="free") +
scale_color_discrete(name = "Distribution")
p
#dev.off()
n.points  = 200
x.lim     = 50
distribution.list  = list(loss_50            = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
loss_0             = binomial_properties(type="loss", n.obs = 100, y.obs  = 0, y.hat=seq(-50,x.lim,length=n.points)),
loss_20            = binomial_properties(type="loss", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_50    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_0     = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_20    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
hessian_50         = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian_0          = binomial_properties(type="hessian", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
hessian_20         = binomial_properties(type="hessian", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
#png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ y.obs,scales="free") +
scale_color_discrete(name = "Distribution")
p
#dev.off()
n.points  = 200
x.lim     = 50
distribution.list  = list(loss_50            = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
loss_0             = binomial_properties(type="loss", n.obs = 100, y.obs  = 0, y.hat=seq(-50,x.lim,length=n.points)),
loss_20            = binomial_properties(type="loss", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_50    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_0     = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_20    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
hessian_50         = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian_0          = binomial_properties(type="hessian", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
hessian_20         = binomial_properties(type="hessian", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
data_complete
paste('y.obs',5)
paste('y.obs',5,sep="")
library(ggplot2)
library(gridExtra)
setwd('/Users/avinashbarnwal/Desktop/Personal/GSOC-2019/AFT/R')
#http://home.iitk.ac.in/~kundu/paper146.pdf
#https://www.mathworks.com/matlabcentral/answers/428624-cdf-for-loglogistic-distribution
set.seed(2)
loss   <- function(n.obs = 100, y.obs = 50, y.hat=1){
loss <- -y.obs*y.hat + n.obs*log(1+exp(y.hat))
return(loss)
}
neg_gradient   <- function(n.obs = 100, y.obs = 50, y.hat=1){
neg_gradient <- y.obs - n.obs*(exp(y.hat)/(1+exp(y.hat)))
return(neg_gradient)
}
hessian   <- function(n.obs = 100, y.obs = 50, y.hat=1){
hessian <- n.obs*(exp(y.hat)/(1+exp(y.hat))**2)
return(hessian)
}
binomial_properties <- function(n.obs = 100, y.obs = 50, y.hat=1,type="loss"){
if(type=="loss"){
loss         = loss(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=loss, data_type = type_series,y_obs = y.obs.col)
return(data)
}
if(type=="neg_gradient"){
neg_gradient = neg_gradient(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=neg_gradient, data_type = type_series,y_obs = y.obs.col)
return(data)
}
if(type=="hessian"){
hessian      = hessian(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=hessian, data_type = type_series,y_obs = y.obs.col)
return(data)
}
}
n.points  = 200
x.lim     = 50
distribution.list  = list(loss_50            = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
loss_0             = binomial_properties(type="loss", n.obs = 100, y.obs  = 0, y.hat=seq(-50,x.lim,length=n.points)),
loss_20            = binomial_properties(type="loss", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_50    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_0     = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_20    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
hessian_50         = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian_0          = binomial_properties(type="hessian", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
hessian_20         = binomial_properties(type="hessian", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
data_complete
#png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ y_obs,scales="free") +
scale_color_discrete(name = "Distribution")
p
#dev.off()
library(ggplot2)
library(gridExtra)
setwd('/Users/avinashbarnwal/Desktop/Personal/GSOC-2019/AFT/R')
#http://home.iitk.ac.in/~kundu/paper146.pdf
#https://www.mathworks.com/matlabcentral/answers/428624-cdf-for-loglogistic-distribution
set.seed(2)
loss   <- function(n.obs = 100, y.obs = 50, y.hat=1){
loss <- -y.obs*y.hat + n.obs*log(1+exp(y.hat))
return(loss)
}
neg_gradient   <- function(n.obs = 100, y.obs = 50, y.hat=1){
neg_gradient <- y.obs - n.obs*(exp(y.hat)/(1+exp(y.hat)))
return(neg_gradient)
}
hessian   <- function(n.obs = 100, y.obs = 50, y.hat=1){
hessian <- n.obs*(exp(y.hat)/(1+exp(y.hat))**2)
return(hessian)
}
binomial_properties <- function(n.obs = 100, y.obs = 50, y.hat=1,type="loss"){
if(type=="loss"){
loss         = loss(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=loss, data_type = type_series,y_obs = y.obs.col)
return(data)
}
if(type=="neg_gradient"){
neg_gradient = neg_gradient(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=neg_gradient, data_type = type_series,y_obs = y.obs.col)
return(data)
}
if(type=="hessian"){
hessian      = hessian(n.obs,y.obs,y.hat)
n.points     = length(y.hat)
type_series  = rep(type,n.points)
y.obs.tag    = paste('y.obs=',y.obs,sep="")
y.obs.col    = rep(y.obs.tag,n.points)
data         = data.frame(y.hat = y.hat, cost=hessian, data_type = type_series,y_obs = y.obs.col)
return(data)
}
}
n.points  = 200
x.lim     = 50
distribution.list  = list(loss_50            = binomial_properties(type="loss", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
loss_0             = binomial_properties(type="loss", n.obs = 100, y.obs  = 0, y.hat=seq(-50,x.lim,length=n.points)),
loss_20            = binomial_properties(type="loss", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_50    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_0     = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
neg_gradient_20    = binomial_properties(type="neg_gradient", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points)),
hessian_50         = binomial_properties(type="hessian", n.obs = 100, y.obs = 50, y.hat=seq(-50,x.lim,length=n.points)),
hessian_0          = binomial_properties(type="hessian", n.obs = 100, y.obs = 0, y.hat=seq(-50,x.lim,length=n.points)),
hessian_20         = binomial_properties(type="hessian", n.obs = 100, y.obs = 20, y.hat=seq(-50,x.lim,length=n.points))
)
data_complete_list = list()
for(distribution in names(distribution.list)){
data_complete_list[[distribution]] = distribution.list[[distribution]]
}
data_complete = do.call(rbind, data_complete_list)
png("binomial_loss.png", width = 800, height = 600)
p = ggplot(data=data_complete) +
geom_line(aes(x=y.hat,y=cost),
data=data_complete,size=1) +
ylab("loss function L_i(y_pred)")    +
xlab("predicted survival time y_pred in days") + facet_grid(data_type ~ y_obs,scales="free") +
scale_color_discrete(name = "Distribution")
p
dev.off()
